import tkinter as tk
from tkinter import ttk

def validate_float(d):
    if d == "" or d.replace(".", "", 1).isdigit():  
        return True
    return False

def submit():
    global orders
    global risk
    if order_entry.get():
        orders = order_entry.get()
    if risk_entry.get():
        risk = risk_entry.get()
    print(f"Orders: ${orders}, Risk: {risk}%")
    with open('settings.txt', 'w') as file:
        file.write('{}\n'.format(orders))
        file.write('{}\n'.format(risk))
        file.write('{}\n'.format(is_eurusd_on))
    file.close()

def flip_eurusd_switch():
    global is_eurusd_on
    if is_eurusd_on:
        switch_eurusd.config(image=off)
        is_eurusd_on = False
    else:
        switch_eurusd.config(image=on)
        is_eurusd_on = True

global is_eurusd_on
global orders
global risk
is_eurusd_on = True

with open('settings.txt', 'r') as file:
    orders = float(file.readline().strip())
    risk = float(file.readline().strip())
    is_eurusd_on = file.readline().strip().lower() in ("true", "1", "yes", "on")
file.close()
print("Order is {} and risk is {}".format(orders, risk))

# Create main application window
root = tk.Tk()
root.title("Trading Bot")
root.geometry("600x400")
root.configure(bg="bisque") #OrangeRed4

# image definitions
on = tk.PhotoImage(file="images/on.png")
off = tk.PhotoImage(file="images/off.png")

vflt = root.register(validate_float)

"""
# Style configuration for white text and button styling
style = ttk.Style()
style.configure("TLabel", foreground="white", background="black", font=("Arial", 10))
style.configure("TButton", foreground="white", background="gray", padding=5)
style.configure("TEntry", foreground="white", background="black")
"""

# Welcome Label
welcome_label = ttk.Label(root, text="Welcome to Trading Bot", font=("Cambria", 20, "bold"))
welcome_label.pack(pady=10)

# Information label
information_label = ttk.Label(root, text="This trading bot trades EURUSD stock only using Meta Trader 5 API")
information_label.pack()

current_value_label = ttk.Label(root, text="Max Order Size is currently set to ${} and risk percent set to {}".format(orders,risk))
current_value_label.pack()

# Instruction Label
instruction_label = ttk.Label(root, text="Please enter the information below")
instruction_label.pack()

# Order Input
order_label = ttk.Label(root, text="Maximum Order Size: $")
order_label.pack()
order_entry = ttk.Entry(root, validate="key", validatecommand=(vflt, "%P"))
order_entry.pack()

# Risk Input
risk_label = ttk.Label(root, text="Maximum Risk: %")
risk_label.pack()
risk_entry = ttk.Entry(root, validate="key", validatecommand=(vflt, "%P"))
risk_entry.pack()

#EURUSD Switch
status_eurusd = ttk.Label(root, text="EURUSD switch")
status_eurusd.pack()
if is_eurusd_on:
    switch_eurusd = ttk.Button(root, image=on, command = flip_eurusd_switch)
else:
    switch_eurusd = ttk.Button(root, image=off, command = flip_eurusd_switch)
switch_eurusd.pack()

# Submit Button
submit_button = ttk.Button(root, text="SUBMIT", command=submit)
submit_button.pack(pady=10)

# Exit Button
exit_button = ttk.Button(root, text="EXIT", command=root.destroy)
exit_button.pack(pady=10)

# Run the application
root.mainloop()
 